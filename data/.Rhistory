merge_hiv_df %>%
select(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > 90000), %>%
summarise(max(`Number of peple all ages receiving ART` > 90000))
merge_hiv_df %>%
select(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > 90000), %>%
summarise(max("Number of peple all ages receiving ART" > 90000))
merge_hiv_df %>%
group_by(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > 90000), %>%
summarise(max("Number of peple all ages receiving ART" > 90000))
merge_hiv_df %>%
group_by(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > (90000)), %>%
summarise(max("Number of peple all ages receiving ART" > 90000))
merge_hiv_df %>%
group_by(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > (90000)), %>%
select(max("Number of peple all ages receiving ART" > 90000))
merge_hiv_df %>%
group_by(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > (90000)), %>%
select(max("Number of peple all ages receiving ART" > 90000))
merge_hiv_df %>%
group_by(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > (90000)), %>%
select(max("Number of peple all ages receiving ART" > 90000))
merge_hiv_df %>%
group_by(Country,"Number of peple all ages receiving ART"), %>%
filter("Number of peple all ages receiving ART" > (90000)), %>%
select("Number of peple all ages receiving ART" > 90000))
merge_hiv_df %>%
group_by(Country)%>%
select(Country,`Number of children (0-14) receiving ART`) %>%
summarise(max(`Number of children (0-14) receiving ART`))
merge_hiv_df %>%
group_by("Country")%>%
select(Country,`Number of children (0-14) receiving ART`) %>%
summarise(max(`Number of children (0-14) receiving ART`))
merge_hiv_df %>%
group_by("Country")%>%
filter(`Number of children (0-14) receiving ART" > 50,000) %>%
#### How accessibility to HAART therapy affects the prevalence of HIV in certain parts of the world?
#### The lack of accessibility to HAART therapy increases the mortality rate by
#### HIV and it heightens the risk of affection. A country's socio-economic status
#### We see that the Highest
merge_hiv_df %>%
group_by(Country,`Adult (15-49) prevalence (%)`, `AIDS(death)-Children and Adults`) %>%
arrange(`Adult (15-49) prevalence (%)`,`AIDS(death)-Children and Adults`, Country)
#### What demographics around the world are benefiting from HAART therapy?
#### The demographic benefitting the most from
#### Adults receiving ART benefit from ART therapy the most.  1,154,000
#### Adults receive ART therapy.The code below
#### reports the maximum number of adults and children receiving ART therapy.
merge_hiv_df %>%
group_by( `Number of adults (15+) receiving ART`, `Number of children (0-14) receiving ART`) %>%
arrange(`Number of adults (15+) receiving ART`, `Number of children (0-14) receiving ART`) %>%
summarise(max(`Number of adults (15+) receiving ART`))
- Compute the information accurately in the script (**1 point**)
- Include the piece of information using in-line R code in the paragraph (**1 point**)
- Make clear the relevance of including the information (if not apparent) (**1 point**)
## Summary Table (**10 points**) (Stassney)
- Introduces the table, explaining why the particular grouping calculation was performed (**2 points**)
####
- Creates a summarized data frame to include as the table using `group_by()` (**2 points**)
- Intentionally sorts the table in a relevant way (**1 point**)
- Only displays relevant columns in the table (**1 point**)
- Displays well formatted column names (**1 point**)
- Successfully renders the table in the report using an appropriate package
# (e.g., don't just print out the data frame) (**1 point**)
- Interprets information the table, honing in on important information (**2 points**)
## Charts (**30 points**, 10 points each) (Khayla & An)
For each chart, you will be evaluated based on the following (remember, each chart must be a **different chart type**):
##testing
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = data$long, lat = data$lat, radius = data$total,
label = lapply(details, htmltools::HTML)
histogram <- ggplot(mpg, aes(location))
g + geom_bar(aes(fill=), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Histogram on Categorical Variable",
subtitle="People Receieving HAART Treatment")
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of Denographics",
caption="Benefiting from HAART Treatment")
- A description of what the chart attempts to answer/understand (**1 point**)
- Selected the appropriate chart type / graphical encoding based on the question of interest and the data type(s) of the features (**3 point**)
- Appropriate labels/legends, depending on your chart type (**4 points**). Including, but not limited to:
- X axis label (if there's an x axis)
- Y axis label (if there's an y axis)
- Title (if there's an ability to add a title -- e.g., not a map)
- Legend for any encodings that are not immediately apparent
- Interprets information from the chart, honing in on important information (**2 points**)
## Code and Report structure (**7 points**) (Maxine & Stassney)
Code is broken up appropriately into the described files.
- Each file is in the appropriate folder: `scripts/`, except `index.Rmd`, which is in the root (**1 point**)
- Each file is loaded into the `index.Rmd` file (**1 point**)
- Only the `index.Rmd` file loads the data (**1 point**)
- Project uses appropriate packages and logic throughout to produce the report (**1 points**)
- All unused code is removed. (**1 point**)
- Comments are used throughout to express purpose of each section (**1 point**)
Report is professionally formatted, including (but not limtted to):
- Using headers to delineate between sections (**1 point**)
- Removing any warnings/messages from your script in the report (**1 point**)
## Code clarity (**5 points**) (Khayla & Anura)
To earn full points, you must not have any `lintr()` errors.
merge_hiv_df %>%
group_by("Country")%>%
filter(`Number of children (0-14) receiving ART" > 50,000) %>%
#### How accessibility to HAART therapy affects the prevalence of HIV in certain parts of the world?
#### The lack of accessibility to HAART therapy increases the mortality rate by
#### HIV and it heightens the risk of affection. A country's socio-economic status
#### We see that the Highest
merge_hiv_df %>%
group_by(Country,`Adult (15-49) prevalence (%)`, `AIDS(death)-Children and Adults`) %>%
arrange(`Adult (15-49) prevalence (%)`,`AIDS(death)-Children and Adults`, Country)
#### What demographics around the world are benefiting from HAART therapy?
#### The demographic benefitting the most from
#### Adults receiving ART benefit from ART therapy the most.  1,154,000
#### Adults receive ART therapy.The code below
#### reports the maximum number of adults and children receiving ART therapy.
merge_hiv_df %>%
group_by( `Number of adults (15+) receiving ART`, `Number of children (0-14) receiving ART`) %>%
arrange(`Number of adults (15+) receiving ART`, `Number of children (0-14) receiving ART`) %>%
summarise(max(`Number of adults (15+) receiving ART`))
- Compute the information accurately in the script (**1 point**)
- Include the piece of information using in-line R code in the paragraph (**1 point**)
- Make clear the relevance of including the information (if not apparent) (**1 point**)
## Summary Table (**10 points**) (Stassney)
- Introduces the table, explaining why the particular grouping calculation was performed (**2 points**)
####
- Creates a summarized data frame to include as the table using `group_by()` (**2 points**)
- Intentionally sorts the table in a relevant way (**1 point**)
- Only displays relevant columns in the table (**1 point**)
- Displays well formatted column names (**1 point**)
- Successfully renders the table in the report using an appropriate package
# (e.g., don't just print out the data frame) (**1 point**)
- Interprets information the table, honing in on important information (**2 points**)
## Charts (**30 points**, 10 points each) (Khayla & An)
For each chart, you will be evaluated based on the following (remember, each chart must be a **different chart type**):
##testing
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = data$long, lat = data$lat, radius = data$total,
label = lapply(details, htmltools::HTML)
histogram <- ggplot(mpg, aes(location))
g + geom_bar(aes(fill=), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Histogram on Categorical Variable",
subtitle="People Receieving HAART Treatment")
pie <- ggplot(mpg, aes(x = "", fill = factor(class))) +
geom_bar(width = 1) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5)) +
labs(fill="class",
x=NULL,
y=NULL,
title="Pie Chart of Denographics",
caption="Benefiting from HAART Treatment")
- A description of what the chart attempts to answer/understand (**1 point**)
- Selected the appropriate chart type / graphical encoding based on the question of interest and the data type(s) of the features (**3 point**)
- Appropriate labels/legends, depending on your chart type (**4 points**). Including, but not limited to:
- X axis label (if there's an x axis)
- Y axis label (if there's an y axis)
- Title (if there's an ability to add a title -- e.g., not a map)
- Legend for any encodings that are not immediately apparent
- Interprets information from the chart, honing in on important information (**2 points**)
## Code and Report structure (**7 points**) (Maxine & Stassney)
Code is broken up appropriately into the described files.
- Each file is in the appropriate folder: `scripts/`, except `index.Rmd`, which is in the root (**1 point**)
- Each file is loaded into the `index.Rmd` file (**1 point**)
- Only the `index.Rmd` file loads the data (**1 point**)
- Project uses appropriate packages and logic throughout to produce the report (**1 points**)
- All unused code is removed. (**1 point**)
- Comments are used throughout to express purpose of each section (**1 point**)
Report is professionally formatted, including (but not limtted to):
- Using headers to delineate between sections (**1 point**)
- Removing any warnings/messages from your script in the report (**1 point**)
## Code clarity (**5 points**) (Khayla & Anura)
To earn full points, you must not have any `lintr()` errors.
merge_hiv_df %>%
group_by("Country")%>%
filter("Number of children (0-14) receiving ART" > 50,000) %>%
#### How accessibility to HAART therapy affects the prevalence of HIV in certain parts of the world?
#### The lack of accessibility to HAART therapy increases the mortality rate by
#### HIV and it heightens the risk of affection. A country's socio-economic status
#### We see that the Highest
merge_hiv_df %>%
group_by(Country,`Adult (15-49) prevalence (%)`, `AIDS(death)-Children and Adults`) %>%
arrange(`Adult (15-49) prevalence (%)`,`AIDS(death)-Children and Adults`, Country)
## Stassney Obregon
## a--5 Assignment
## Summary Information
#### The "shooting-2018.cvs" file is a dataframe that
#### provides the total number of shooting, injuries, locations,
#### and date of shootings in the U.S in the year 2018.
#### Load 'dplyr' package
library(dplyr)
#### Link to the original data source
"http://www.shootingtracker.com"
#### Loading and viewing "shooting-2018.cvs" file into R
shooting_2018df <- read.csv(file = "data/shootings-2018.csv", stringsAsFactors = FALSE)
View(shooting_2018df)
#### Total number of shootings in the U.S. in 2018
sum_shootings_2018 <- nrow(shooting_2018df)
#### 340 shootings
#### Total lives that were lost
lives_lost <- select(shooting_2018df, num_killed)
sum(lives_lost)
#### 373 people were killed
#### City with most death (most impacted)
most_death <- shooting_2018df %>%
filter(num_killed == max(num_killed)) %>%
select(city)
#### Pompano Beach (Parkland) City w/ 17 death
#### Two other insights of my choice
#### City with least death
least_death <- shooting_2018df %>%
filter(num_killed == min(num_killed)) %>%
select(city)
#### 168 cities had zero death regarding shooting
#### City with most injuries
most_injuries <- shooting_2018df %>%
filter(num_injured == max(num_injured)) %>%
select(city)
#### Trenton city has total of 23 injuries
## Paragrapgh Summary
#### In 2018, there were 340 reported shootings in the U.S.
#### With a total of 373 deaths.
#### Among all the cities in the U.S., Pompano Beach (Parkland) city in Florida,
#### has the highest death count w/ a total of 17 deaths related to shooting.
#### And among all the cities in the U.S., Trenton city in New Jersey,
#### has the highest injuries w/ a total of 23 shooting injuries.
## Summary Table
#### Summary Table Consist of:
#### date, state, num_killed, & num_injured
#summary_df <- select(
#  shooting_2018df, date:num_injured,
#  -city,
# -address)
#### Changing all column names
names(summary_df)[1] <- "Date"
names(summary_df)[2] <- "State"
names(summary_df)[3] <- "Death"
names(summary_df)[4] <- "Injuries"
#### Arranging column 3 & 4 from max to min
summary_df <- arrange(summary_df, desc(num_killed), desc(num_injured))
#### Finding where the highest shootings injuries in the U.S. and when it occurs.
maxinjuries_place_time <- summary_df %>%
filter(Injuries == max(Injuries)) %>%
select(State, Date, Injuries)
#### New Jersey, 19 Injuries, on June 17, 2018
#### Finding where the highest death count from shootings in the U.S. and when it occurs.
maxdeath_place_time <- summary_df %>%
filter(Death == max(Death)) %>%
select(State, Date, Death)
#### Florida, 17 Deaths, on Feb. 14, 2018
#### When is the highest Death and Injuries in Florida.
valentines_day <- summary_df %>%
filter(State == "Florida") %>%
select(Death, Injuries, Date, State)
#### Feb, 14, 2018 is the highest death (17) and injuries (17),
#### related to shootings in Florida.
#### Important Insights
#### I found it interesting that on Valentines Day (Feb. 14),
#### the highest death count and injuries related to shootings
#### occured in Florida. There were 17 injuries with 17 fatal shootings
#### happened on the day of Valentines Day.
#### Which leads me to infer that a mass shooting might have occurred.
## Decription of a particular incident
#### State and date with max death count in 2018
maxdeath_place_time <- summary_df %>%
filter(Death == max(Death)) %>%
select(State, Date, Death)
#### 2018 Valentines Day in Florida
valentines_day <- summary_df %>%
filter(State == "Florida") %>%
select(Death, Injuries, Date, State)
#### Date: February 14, 2018
#### Location: Florida
#### Number Injured: 17
#### Number Killed: 17
#### Link to an outside source about the incident:
"https://www.crystalinks.com/FlaSchShooting2018"
## Interactive Map
#### Instal and load 'ggplot2'
library("ggplot2")
#### Purpose of Map
#### The purpose of the map is to show where in the U.S.
#### had the most death caused by fatal shootings in 2018.
#### Load 'maps' package
library(maps)
#### Load USA map shape
usa <- map_data("world")
state_shape <- map_data("state")
us <- ggplot(state_shape) +
geom_polygon(
mapping = aes(x = long, y = lat, color = state),
color = "white", # show state outlines
size = .1
)
#### Plots of States in the U.S with shooting
states <- ggplot(data = shooting_2018df) +
geom_point(
mapping = aes(x = long, y = lat, color = state))
#### Merging both variables together
altogether <- merge(shooting_2018df, usa, by = c("long", "lat"))
## Plot of your choice
#### Question
#### What is the highest number of shooting in the US in 2018?
#### Plot of number of shooting in each state in the U.S.
ggplot(data = shooting_2018df) +
geom_point(mapping = aes(x = date, y = num_killed, color = state))
#### Title: Number of Shooting
#### X-axis: date
#### Y-axis: num_killed
#### Two Highlisghts
#### Florida has the highest death count in the U.S in 2018
#### Florida has a total of 17 death count in U.S.
names(hiv_df2)[3] <- "Country"
View(hiv_df2)
View(hiv_df1)
names(hiv_df2)[3] <- "Region"
names(hiv_df2)[3] <- "Region"
View(hiv_df1)
names(hiv_df1)[3] <- "Region"
View(hiv_df1)
merge_hiv_df <- merge(x=hiv_df1, y=hiv_df2, by=c("Year","Location", "Region"))
dim(data)
View(merge_hiv_df)
hiv_df1 <- read.csv("by_area_hiv_est_from_1990-present.csv", stringsAsFactors = FALSE)
hiv_df1 <- hiv_df1[-(1:4),]
colnames(hiv_df1) <- hiv_df1[1,]
colnames(hiv_df1)[1:2] <- c("Year","Location")
hiv_df1 <- hiv_df1[-1,]
names(hiv_df1)[3] <- "Region"
View(hiv_df1)
hiv_df2 <- read.csv("by_area_hiv_treatment_est_from_1990-present.csv", stringsAsFactors = FALSE)
hiv_df2 <- hiv_df2[-(1:4),]
colnames(hiv_df2)<-hiv_df2[1,]
colnames(hiv_df2)[1:2] <- c("Year","Location")
hiv_df2 <- hiv_df2[-1,]
names(hiv_df2)[3] <- "Region"
View(hiv_df2)
dim(hiv_df1)
dim(hiv_df2)
merge_hiv_df <- merge(x=hiv_df1, y=hiv_df2, by=c("Year","Location", "Region"))
dim(data)
hiv_df2_noNA <- hiv_df2[-c(20:50)]
merge_hiv_df <- merge(x=hiv_df1, y=hiv_df2_noNA, by=c("Year","Location", "Region"))
dim(data)
View(merge_hiv_df)
summary(merge_hiv_df)
nrow(merge_hiv_df)
ncol(merge_hiv_df)
year <- merge_hiv_df %>%
mutate(date = as.Date(deadline, "%Y-%m-%d")) %>%
mutate(years = substr(date, start = 1, stop = 4)) %>%
group_by(years) %>%
filter(years == 2018) %>%
count() %>%
pull(n)
year <- merge_hiv_df %>% %
group_by(years) %>%
filter(years == 2018) %>%
count() %>%
pull(n)
year <- merge_hiv_df %>%
mutate(date = as.Date(deadline, "%Y-%m-%d")) %>%
mutate(years = substr(date, start = 1, stop = 4)) %>%
group_by(Year) %>%
filter(Year == 2018) %>%
count() %>%
pull(n)
- Intentionally sorts the table in a relevant way (**1 point**)
year <- merge_hiv_df %>%
mutate(date = as.Date(deadline, "%Y-%m-%d")) %>%
mutate(years = substr(date, start = 1, stop = 4)) %>%
group_by(Year) %>%
filter(Year == 2018) %>%
count() %>%
pull(n)
year <- merge_hiv_df %>%
group_by(Year) %>%
filter(Year == 2018) %>%
count() %>%
pull(n)
year
View(year)
View(hiv_df2_noNA)
names(merge_hiv_df)[13] <- Total AIDS Death
names(merge_hiv_df)[13] <- "Total AIDS Death"
year <- merge_hiv_df %>%
group_by(Year) %>%
filter(Year == 2018) %>%
summarise(sum(Total AIDS Death))
year <- merge_hiv_df %>%
group_by(Year) %>%
filter(Year == 2018) %>%
summarise(sum(Total AIDS Death))
year <- merge_hiv_df %>%
mutate(date = as.Date('%d-%m-%Y', label=TRUE)) %>%
group_by(Year) %>%
filter(Year == 2018) %>%
summarize(`Total AIDS Death` = max(`Total AIDS Death`)))
year <- merge_hiv_df %>%
mutate(date = as.Date('%d-%m-%Y', label=TRUE)) %>%
group_by(Year) %>%
filter(Year == 2018) %>%
summarize(`Total AIDS Death` = max(Total AIDS Death))
year <- merge_hiv_df %>%
mutate(date = as.Date('%d-%m-%Y', label=TRUE)) %>%
group_by(Year) %>%
filter(Year == 2018) %>%
summarize(`Total AIDS Death` = max(Total AIDS Death))
names(merge_hiv_df)[13] <- "Total AIDS Death"
select(year, Total AIDS Death)
select(Total AIDS Death)
year <- merge_hiv_df %>%
group_by(Year) %>%
summarize(Total AIDS Death = max(Total AIDS Death)) %>%
select(Total AIDS Death)
summary_df <- select(
merge_hiv_df, Year:Total AIDS Death
)
names(merge_hiv_df)[13] <- "aids_death"
names(merge_hiv_df)[1] <- "year"
summary_df <- select(
merge_hiv_df, year:aids_death
)
summary_df <- select(
merge_hiv_df, year:aids_death,
-Location)
relevant_info_df <- select(
merge_hiv_df, year:aids_death,
-Location)
merge_hiv_df <- arrange(merge_hiv_df, desc(aids_death), desc(year))
View(merge_hiv_df)
merge_hiv_df <- arrange(merge_hiv_df, desc(aids_death))
names(merge_hiv_df)[13] <- "Aids_death"
names(merge_hiv_df)[1] <- "Year"
relevant_info_df <- select(
merge_hiv_df, Year:Aids_death,
-Location)
install.packages("shiny")
library(shiny)
outputArgs=list()) {
renderTable(expr, striped = FALSE, hover = FALSE, bordered = FALSE,
spacing = c("s", "xs", "m", "l"), width = "auto", align = NULL,
rownames = FALSE, colnames = TRUE, digits = NULL, na = "NA", ...,
env = parent.frame(), quoted = FALSE, outputArgs = list())
renderTable(expr, striped = FALSE, hover = FALSE, bordered = FALSE,
spacing = c("s", "xs", "m", "l"), width = "auto", align = NULL,
rownames = FALSE, colnames = TRUE, digits = NULL, na = "NA",
env = parent.frame(), quoted = FALSE, outputArgs = list())
renderTable(expr, striped = FALSE, hover = FALSE, bordered = FALSE,
spacing = c("s"), width = "auto", align = NULL,
rownames = FALSE, colnames = TRUE, digits = NULL, na = "NA",
env = parent.frame(), quoted = FALSE, outputArgs = list())
renderTable(expr, striped = FALSE, hover = FALSE, bordered = FALSE,
spacing = c("s"), width = "auto", align = NULL,
rownames = FALSE, colnames = TRUE, digits = NULL, na = "NA",
env = merge_hiv_df, quoted = FALSE, outputArgs = list())
renderTable(expr, striped = FALSE, hover = FALSE, bordered = FALSE,
spacing = c("s"), width = "auto", align = NULL,
rownames = FALSE, colnames = TRUE, digits = NULL, na = "NA",
env = merge_hiv_df, quoted = FALSE, outputArgs = merge_hiv_df)
- Title (if there's an ability to add a title -- e.g., not a map)
- Legend for any encodings that are not immediately apparent
- Interprets information from the chart, honing in on important information (**2 points**)
## Code and Report structure (**7 points**) (Maxine & Stassney)
Code is broken up appropriately into the described files.
- Each file is in the appropriate folder: `scripts/`, except `index.Rmd`, which is in the root (**1 point**)
- Each file is loaded into the `index.Rmd` file (**1 point**)
- Only the `index.Rmd` file loads the data (**1 point**)
- Project uses appropriate packages and logic throughout to produce the report (**1 points**)
- All unused code is removed. (**1 point**)
- Comments are used throughout to express purpose of each section (**1 point**)
Report is professionally formatted, including (but not limtted to):
- Using headers to delineate between sections (**1 point**)
- Removing any warnings/messages from your script in the report (**1 point**)
## Code clarity (**5 points**) (Khayla & Anura)
To earn full points, you must not have any `lintr()` errors.
install.packages("lintr")
- Title (if there's an ability to add a title -- e.g., not a map)
- Legend for any encodings that are not immediately apparent
- Interprets information from the chart, honing in on important information (**2 points**)
## Code and Report structure (**7 points**) (Maxine & Stassney)
Code is broken up appropriately into the described files.
- Each file is in the appropriate folder: `scripts/`, except `index.Rmd`, which is in the root (**1 point**)
- Each file is loaded into the `index.Rmd` file (**1 point**)
- Only the `index.Rmd` file loads the data (**1 point**)
- Project uses appropriate packages and logic throughout to produce the report (**1 points**)
- All unused code is removed. (**1 point**)
- Comments are used throughout to express purpose of each section (**1 point**)
Report is professionally formatted, including (but not limtted to):
- Using headers to delineate between sections (**1 point**)
- Removing any warnings/messages from your script in the report (**1 point**)
## Code clarity (**5 points**) (Khayla & Anura)
To earn full points, you must not have any `lintr()` errors.
install.packages("lintr")
library(lintr)
